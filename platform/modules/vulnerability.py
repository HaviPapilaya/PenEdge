"""
Modul untuk Vulnerability Analysis menggunakan Large Language Model (LLM)
"""

# ====== IMPORTS ======
import os
import json
import requests
from platform.utils.colors import Colors
from platform.utils.helpers import Helpers
from collections import defaultdict
from platform.ollama_config import OLLAMA_API_URL, OLLAMA_MODEL_VULNER

# ====== KELAS UTAMA ======
class VulnerabilityScanner:
    def __init__(self):
        self.colors = Colors()
        self.helpers = Helpers()
        # PENTING: Sesuaikan URL ini jika Ollama Anda tidak berjalan di localhost
        # atau jika port-nya berbeda. Jika skrip ini berjalan di dalam VM/container,
        # ganti 'localhost' dengan IP address mesin host Anda.
        self.output_dir = self.helpers.output_dir

    # ====== WORKFLOW UTAMA & FUNGSI UTAMA ======
    def list_and_select_file(self):
        """Menampilkan daftar file di direktori output dan meminta pengguna memilih."""
        print(f"\n{self.colors.BLUE}Memindai file hasil scan di: {self.output_dir}{self.colors.NC}")
        
        output_files = []
        for root, _, files in os.walk(self.output_dir):
            for file in files:
                if file.endswith(".txt"):
                    output_files.append(os.path.join(root, file))
        # Urutkan berdasarkan waktu modifikasi (timestamp), paling baru di paling bawah
        output_files.sort(key=lambda x: os.path.getmtime(x))

        if not output_files:
            print(f"{self.colors.RED}Tidak ada file output (.txt) yang ditemukan di direktori output.{self.colors.NC}")
            return None

        # Kelompokkan per folder
        folder_dict = defaultdict(list)
        for file_path in output_files:
            rel_path = os.path.relpath(file_path, self.output_dir)
            folder = os.path.dirname(rel_path)
            folder_dict[folder].append(rel_path)

        # Tampilkan per folder
        file_map = {}
        idx = 1
        for folder in sorted(folder_dict):
            print(f"\n[{folder if folder else '.'}]")
            for rel_path in sorted(folder_dict[folder]):
                print(f"  {idx}. {rel_path}")
                file_map[idx] = os.path.join(self.output_dir, rel_path)
                idx += 1

        while True:
            try:
                choice_input = input(f"\nMasukkan nomor file (1-{idx-1}), 0 untuk kembali, atau 'q' untuk keluar: ").strip()
                if choice_input.lower() == 'q':
                    print(f"{self.colors.YELLOW}[!] Proses dibatalkan oleh pengguna.{self.colors.NC}")
                    return None
                choice = int(choice_input)
                if choice == 0:
                    return None
                if 1 <= choice < idx:
                    return file_map[choice]
                else:
                    print(f"{self.colors.RED}Pilihan tidak valid.{self.colors.NC}")
            except ValueError:
                print(f"{self.colors.RED}Masukkan angka yang valid.{self.colors.NC}")

    def analyze_file_with_llm(self, file_path):
        """Membaca file, mengirim ke LLM, dan menampilkan hasilnya."""
        print(f"\n{self.colors.BLUE}Membaca konten dari: {os.path.basename(file_path)}{self.colors.NC}")
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
        except Exception as e:
            print(f"{self.colors.RED}Gagal membaca file: {e}{self.colors.NC}")
            return

        print(f"{self.colors.YELLOW}Mengirim data ke Llama 3 untuk dianalisis... Ini mungkin butuh beberapa saat.{self.colors.NC}")

        # Prompt yang dirancang untuk analisis keamanan
        prompt = f"""
        Anda adalah seorang analis keamanan siber senior. 
        Tugas Anda adalah menganalisis output dari alat pemindaian keamanan berikut.
        
        Output Alat:
        ---
        {content}
        ---

        Berikan analisis Anda dalam format berikut:
        1.  **Ringkasan Singkat**: Jelaskan secara singkat temuan utama dari hasil pemindaian.
        2.  **Identifikasi Kerentanan**: Buat daftar kerentanan yang teridentifikasi. Untuk setiap kerentanan, sebutkan tingkat keparahannya (misalnya, Kritis, Tinggi, Sedang, Rendah).
        3.  **Rekomendasi Tindakan**: Berikan saran langkah-langkah perbaikan yang jelas dan dapat ditindaklanjuti untuk setiap kerentanan yang ditemukan.
        4.  **Kesimpulan**: Berikan kesimpulan akhir dari analisis Anda.

        Jika tidak ada kerentanan yang ditemukan, nyatakan dengan jelas.
        """

        payload = {
            "model": OLLAMA_MODEL_VULNER,
            "prompt": prompt,
            "stream": False
        }

        try:
            response = requests.post(OLLAMA_API_URL, json=payload, timeout=300) # Timeout 5 menit
            response.raise_for_status()  # Cek jika ada error HTTP (spt 404, 500)

            print(f"\n{self.colors.GREEN}=== Hasil Analisis dari LLM ==={self.colors.NC}")
            
            # Respons dari Ollama adalah JSON per baris, kita ambil yang terakhir
            full_response = response.json()
            analysis_text = full_response.get('response', 'Tidak ada respons dari model.')
            
            print(analysis_text)
            print(f"\n{self.colors.GREEN}=============================={self.colors.NC}")

        except requests.exceptions.RequestException as e:
            print(f"{self.colors.RED}[!] Gagal terhubung ke Ollama API: {e}{self.colors.NC}")
            print(f"{self.colors.YELLOW}Pastikan Ollama sedang berjalan dan URL API '{OLLAMA_API_URL}' sudah benar.{self.colors.NC}")
            print(f"{self.colors.YELLOW}Jika skrip ini berjalan di VM/Docker, pastikan 'localhost' telah diganti dengan IP host Anda.{self.colors.NC}")

    def run_vulnerability_menu(self):
        """Menu utama untuk analisis kerentanan."""
        while True:
            print(f"\n{self.colors.BLUE}--- Analisis Kerentanan dengan LLM ---{self.colors.NC}")
            print("1. Pilih File Output untuk Dianalisis")
            print("2. Kembali ke Menu Tools Pentest")
            print("Pilih opsi (1-2, atau 'q' untuk keluar): ", end="")

            choice = input().strip()
            if choice.lower() == 'q':
                print(f"{self.colors.YELLOW}[!] Proses dibatalkan oleh pengguna.{self.colors.NC}")
                break
            elif choice == "1":
                selected_file = self.list_and_select_file()
                if selected_file:
                    self.analyze_file_with_llm(selected_file)
            elif choice == "2":
                break
            else:
                print(f"{self.colors.RED}[!] Pilihan tidak valid{self.colors.NC}")
            
            input(f"\n{self.colors.GREEN}Tekan Enter untuk melanjutkan...{self.colors.NC}") 

    def get_summary(self, domain):
        """Parse hasil vulnerability analysis untuk mendapatkan summary"""
        findings = []
        
        # VulnerabilityScanner tidak menghasilkan file output sendiri,
        # tapi bisa menganalisis file output dari tools lain
        # Untuk saat ini, return empty summary
        return {
            'findings': findings,
            'summary': 'Vulnerability analysis menggunakan LLM untuk analisis manual'
        }

    def run(self, domain=None):
        """Method untuk mendukung full pipeline"""
        if domain is None:
            self.run_vulnerability_menu()
        else:
            print(f"{self.colors.BLUE}=== [Vulnerability Analysis Otomatis] ==={self.colors.NC}")
            print(f"{self.colors.YELLOW}Vulnerability analysis untuk domain: {domain}{self.colors.NC}")
            print(f"{self.colors.BLUE}[*] Vulnerability analysis selesai{self.colors.NC}") 